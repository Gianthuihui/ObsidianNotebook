<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[长脑子了]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>长脑子了</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 10 Oct 2024 03:10:58 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 10 Oct 2024 03:10:55 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[数据]]></title><description><![CDATA[ 
 <br><br>输入文件示例，txt 文件，第一列为  ID，第二列为 单倍群，第三列为 地区，没有表头。抽样是随机的，没有严格的按照单倍群情况<br>LP6005441-DNA_C02   R1b1a1b1a1a2a1a1a1  Basque_France
LP6005441-DNA_C09   R1b1a1b1a1a1b1a1a   Orcadian_OrkneyIslands
LP6005441-DNA_C10   R1a1a1b2a1a2c1d2    Pathan_Pakistan
LP6005441-DNA_G11   R1a1a1b2a1a2c   Sindhi_Pakistan
LP6005442-DNA_A07   R1b1a1b1a1a1c2b2a1b6b   Cree_Canada
LP6005443-DNA_B02   R1a1a1b2a1a2c2d1    Uyghur_China
复制<br><br>抽样人数的计算公式为：<br><br>其中，地区所占比例 为该地区样本数量占总样本数量的比例。即：<br><br><br>假设：<br>
<br>总样本数量（total samples）= 561
<br>计划样本数量（planned total）= 60
<br>如果某个地区的样本数量为10，那么其比例为：<br><br>根据上面的公式计算抽样人数：<br><br>这个地区将抽取1人。<br><br>假设某个地区的样本数量为1：<br><br>
则抽样人数为：<br><br>由于抽样人数必须为整数，因此在四舍五入时，这个地区的抽样人数将被视为0。<br><br>在代码中，添加强制抽取1人的逻辑，就是为了确保即使比例很小的地区也至少能抽取到1个样本，从而保证每个地区都能有代表性。<br><br>运行代码后，会显示现有总样本数，要求用户输入一个 计划的总样本数，然后按回车就行，而后终端会返回抽样的情况，并将抽样结果写入输出文件中<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409221220913.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import random

# 从文件读取样本信息
def read_samples(file_path):
    samples_by_region = {}
    with open(file_path, 'r') as file:
        for line in file:
            sample_id, haplogroup, region = line.strip().split('\t')  # 假设文件使用制表符分隔
            if region not in samples_by_region:
                samples_by_region[region] = []
            samples_by_region[region].append((sample_id, haplogroup))
    return samples_by_region

# 计算总样本数量
def count_samples(samples_by_region):
    total_samples = sum(len(samples) for samples in samples_by_region.values())
    return total_samples

# 按比例进行抽样
def proportionate_sampling(samples_by_region, total_samples):
    selected_samples = {}
    total_size = count_samples(samples_by_region)

    for region, samples in samples_by_region.items():
        proportion = len(samples) / total_size
        # 推荐最小样本数：至少1人
        samples_to_select = max(1, int(proportion * total_samples))

        # 如果原本的比例抽取人数为0，则强制抽取1人
        if proportion &lt; 1 / total_samples:
            samples_to_select = 1
            print(f"{region} 占总样本的比例: {proportion:.2%}，抽取人数: {samples_to_select} (至少1人)")
        else:
            print(f"{region} 占总样本的比例: {proportion:.2%}，抽取人数: {samples_to_select}")

        selected_samples[region] = random.sample(samples, min(samples_to_select, len(samples)))

    return selected_samples

# 将抽样结果写入文件
def write_samples_to_file(selected_samples, output_file_path):
    with open(output_file_path, 'w') as file:
        for region, samples in selected_samples.items():
            for sample_id, haplogroup in samples:
                file.write(f"{sample_id}\t{haplogroup}\t{region}\n")

# 主程序
def main():
    # 输入文件路径
    input_file_path = 'C:/Users/LuzHu/Desktop/1.txt'  # 输入文件路径
    output_file_path = 'C:/Users/LuzHu/Desktop/selected_samples.txt'  # 输出文件路径

    samples_by_region = read_samples(input_file_path)

    # 打印现有样本数量
    total_samples = count_samples(samples_by_region)
    print(f"现有样本数量: {total_samples}")

    # 用户输入计划的总样本数量
    planned_total = int(input("请输入计划的总样本数量: "))

    # 按比例进行抽样
    selected_samples = proportionate_sampling(samples_by_region, planned_total)

    # 将抽样结果写入文件
    write_samples_to_file(selected_samples, output_file_path)
    print(f"抽样结果已保存到文件: {output_file_path}")

if __name__ == "__main__":
    main()

复制]]></description><link>软件操作\分析软件\python\python：按地区比例进行抽样.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：按地区比例进行抽样.md</guid><pubDate>Sun, 22 Sep 2024 04:22:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409221220913.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409221220913.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据]]></title><description><![CDATA[ 
 <br><br>txt 文件，有表头，不能更改表头<br>Haplo   Population_Province
O2a2b1a1a1c1a1a Bai_Guizhou
N1b2    Bai_Guizhou
N1b2    Bai_Guizhou
O1a1a2a1a   Bai_Guizhou
O2a2b1a2a1a1b1b2b2  Bai_Guizhou
N1b2    Bai_Guizhou
O2a2b1a2a1a1b1b2b2  Bai_Guizhou
O2a2b1a1a1c1a1a Bai_Guizhou
O2a2b1a1a1c1a1a Bai_Guizhou
O2a2b1a2a1a1b1b2b2  Bai_Guizhou
O2a2b1a1a1  Bai_Guizhou
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271432002.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>还有一个 csv 文件储存多样性值]]></description><link>软件操作\分析软件\python\python：单倍群多样性计算.html</link><guid isPermaLink="false">软件操作/分析软件/Python/python：单倍群多样性计算.md</guid><pubDate>Fri, 27 Sep 2024 06:59:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271432002.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271432002.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据]]></title><description><![CDATA[ 
 <br>如果只需要做共享单倍群支系的 Venn 图，可以在网址上完成 <a data-tooltip-position="top" aria-label="https://bioinformatics.psb.ugent.be/webtools/Venn/" rel="noopener" class="external-link" href="https://bioinformatics.psb.ugent.be/webtools/Venn/" target="_blank">Draw Venn Diagram (ugent.be)</a>，使用方法见<a data-href="共享单倍群支系的 Venn 图" href="共享单倍群支系的-venn-图.html" class="internal-link" target="_self" rel="noopener">共享单倍群支系的 Venn 图</a><br><br>txt 文件，注意表头不要改变，ID分类 是组别的标签<br>ID	单倍群	ID分类
Bai_Bijie11	O2	All_Minority_2
Bai_Bijie12	N1	All_Minority_2
Bai_Bijie13	N1	All_Minority_2
Bai_Bijie14	O1	All_Minority_2
Bai_Bijie20	O2	All_Minority_2
Bai_Bijie21	N1	All_Minority_2
Bai_Bijie23	O2	All_Minority_2
Bai_Bijie26	O2	All_Minority_2
Bai_Bijie27	O2	All_Minority_2
Bai_Bijie28	O2	All_Minority_2
复制<br><br>中间显示的是共享单倍群的个体总数，例如，对于O 单倍群，少数民族有10个，汉族有20个，那么显示在中间的共享数值为30个。独有的则是不共享单倍群的个体总数。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410091115565.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>输出的文件有详细记录<br>每个集合的样本数量：
All_Minority_1: 934 个样本
All_Han_1: 1272 个样本

共享的单倍群及对应ID数目：
单倍群 O: 1717 个ID
单倍群 N: 121 个ID
单倍群 D: 89 个ID
单倍群 Q: 46 个ID
单倍群 C: 177 个ID
单倍群 R: 27 个ID
单倍群 J: 19 个ID
单倍群 E: 2 个ID

总共享的ID数目: 2198

每个集合的独占单倍群及对应ID数目：

All_Minority_1 的独占单倍群及其ID数量:
单倍群 F: 4 个ID
单倍群 I: 2 个ID

All_Han_1 的独占单倍群及其ID数量:
单倍群 G: 1 个ID
单倍群 T: 1 个ID
复制<br><br>import pandas as pd
from collections import defaultdict
import matplotlib.pyplot as plt
from matplotlib_venn import venn2, venn3

# 读取txt文件，假设使用tab分隔符
def read_data(file_path):
    df = pd.read_csv(file_path, sep='\t', header=0)
    return df

# 构建集合及共享的数量
def create_sets(df):
    category_groups = defaultdict(list)  # 每个分类中的ID列表
    haplogroups = defaultdict(list)  # 每个单倍群对应的ID列表
    
    for _, row in df.iterrows():
        haplogroup = row['单倍群']
        category = row['ID分类']
        category_groups[category].append(row['ID'])  # 记录该分类下的ID
        haplogroups[haplogroup].append((row['ID'], category))  # 记录该单倍群下的ID和分类
    
    return category_groups, haplogroups

# 计算共享部分及每个集合的独占部分
def calculate_shared_counts(category_groups, haplogroups):
    categories = list(category_groups.keys())
    
    # 初始化共享部分统计
    shared_counts = defaultdict(int)
    category_unique = defaultdict(int)  # 每个分类的独占ID数量
    category_shared_contribution = defaultdict(int)  # 每个分类在共享部分的贡献
    
    # 处理两个集合的情况
    if len(categories) == 2:
        category1, category2 = categories
        
        for haplogroup, ids in haplogroups.items():
            in_cat1 = any(id_ for id_, cat in ids if cat == category1)
            in_cat2 = any(id_ for id_, cat in ids if cat == category2)
            
            # 如果这个单倍群存在于两个分类中，计算共享数目
            if in_cat1 and in_cat2:
                shared_counts[haplogroup] = len(ids)
                # 统计每个集合在共享部分的贡献
                for id_, cat in ids:
                    category_shared_contribution[cat] += 1
            else:
                if in_cat1:
                    category_unique[category1] += len([id_ for id_, cat in ids if cat == category1])
                if in_cat2:
                    category_unique[category2] += len([id_ for id_, cat in ids if cat == category2])
        
        return category1, category2, shared_counts, category_unique, category_shared_contribution
    
    # 处理三个集合的情况
    elif len(categories) == 3:
        category1, category2, category3 = categories
        
        for haplogroup, ids in haplogroups.items():
            in_cat1 = any(id_ for id_, cat in ids if cat == category1)
            in_cat2 = any(id_ for id_, cat in ids if cat == category2)
            in_cat3 = any(id_ for id_, cat in ids if cat == category3)
            
            # 如果单倍群存在于三个分类中，计算共享数目
            if in_cat1 and in_cat2 and in_cat3:
                shared_counts[haplogroup] = len(ids)
                for id_, cat in ids:
                    category_shared_contribution[cat] += 1
            else:
                if in_cat1:
                    category_unique[category1] += len([id_ for id_, cat in ids if cat == category1])
                if in_cat2:
                    category_unique[category2] += len([id_ for id_, cat in ids if cat == category2])
                if in_cat3:
                    category_unique[category3] += len([id_ for id_, cat in ids if cat == category3])
        
        return category1, category2, category3, shared_counts, category_unique, category_shared_contribution

# 保存结果到txt文件
def save_results(file_path, category_groups, shared_counts, category_unique, haplogroups):
    # 指定编码为 'utf-8' 来防止中文字符乱码
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write("每个集合的样本数量：\n")
        for category, ids in category_groups.items():
            f.write(f"{category}: {len(ids)} 个样本\n")
        
        f.write("\n共享的单倍群及对应ID数目：\n")
        total_shared_ids = 0
        for haplogroup, count in shared_counts.items():
            f.write(f"单倍群 {haplogroup}: {count} 个ID\n")
            total_shared_ids += count
        
        f.write(f"\n总共享的ID数目: {total_shared_ids}\n")
        
        f.write("\n每个集合的独占单倍群及对应ID数目：\n")
        for category, ids in category_groups.items():
            unique_haplogroups = defaultdict(list)
            for haplogroup, id_category_pairs in haplogroups.items():
                # 获取当前分类下的独占ID和单倍群
                exclusive_ids = [id_ for id_, cat in id_category_pairs if cat == category]
                in_other_categories = any(cat != category for _, cat in id_category_pairs)  # 检查是否出现在其他分类中
                if exclusive_ids and not in_other_categories:
                    unique_haplogroups[haplogroup].extend(exclusive_ids)
            
            # 写入独占单倍群及其ID数目
            f.write(f"\n{category} 的独占单倍群及其ID数量:\n")
            if unique_haplogroups:
                for haplogroup, exclusive_ids in unique_haplogroups.items():
                    f.write(f"单倍群 {haplogroup}: {len(exclusive_ids)} 个ID\n")
            else:
                f.write("没有独占的单倍群。\n")



# 生成韦恩图
def plot_venn(category_groups, shared_counts, category_unique, category_shared_contribution, colors):
    categories = list(category_groups.keys())
    
    if len(categories) == 2:
        category1, category2 = categories
        total1 = len(category_groups[category1])  # 获取第一个集合的总数量
        total2 = len(category_groups[category2])  # 获取第二个集合的总数量
        shared = sum(shared_counts.values())  # 计算共享部分的数量
        unique1 = total1 - category_shared_contribution[category1]  # 计算第一个集合的独占部分
        unique2 = total2 - category_shared_contribution[category2]  # 计算第二个集合的独占部分
        
        # 使用固定值 1 来确保圆形大小一致
        venn = venn2(
            subsets=(1, 1, 1),  # 固定值保证圆形
            set_labels=(f'{category1} ({total1})', f'{category2} ({total2})')
        )
        
        # 设置每个部分的标签
        if venn.get_label_by_id('10') is not None:
            venn.get_label_by_id('10').set_text(f'{unique1}')  # 设置第一个集合的独占部分
        if venn.get_label_by_id('01') is not None:
            venn.get_label_by_id('01').set_text(f'{unique2}')  # 设置第二个集合的独占部分
        if venn.get_label_by_id('11') is not None:
            venn.get_label_by_id('11').set_text(f'{shared}')  # 设置共享部分的数量
        
        # 设置颜色
        venn.get_patch_by_id('10').set_color(colors[0])  # 第一个集合的颜色
        venn.get_patch_by_id('01').set_color(colors[1])  # 第二个集合的颜色
        venn.get_patch_by_id('11').set_color('#C6E1B8')  # 共享部分的颜色
    
    elif len(categories) == 3:
        category1, category2, category3 = categories
        total1 = len(category_groups[category1])  # 获取第一个集合的总数量
        total2 = len(category_groups[category2])  # 获取第二个集合的总数量
        total3 = len(category_groups[category3])  # 获取第三个集合的总数量
        shared = sum(shared_counts.values())  # 计算共享部分的数量
        unique1 = total1 - category_shared_contribution[category1]  # 计算第一个集合的独占部分
        unique2 = total2 - category_shared_contribution[category2]  # 计算第二个集合的独占部分
        unique3 = total3 - category_shared_contribution[category3]  # 计算第三个集合的独占部分
        
        # 使用固定值 1 来确保圆形大小一致
        venn = venn3(
            subsets=(1, 1, 1, 1, 1, 1, 1),  # 固定值保证圆形
            set_labels=(f'{category1} ({total1})', f'{category2} ({total2})', f'{category3} ({total3})')
        )
        
        # 设置每个部分的标签
        if venn.get_label_by_id('100') is not None:
            venn.get_label_by_id('100').set_text(f'{unique1}')  # 设置第一个集合的独占部分
        if venn.get_label_by_id('010') is not None:
            venn.get_label_by_id('010').set_text(f'{unique2}')  # 设置第二个集合的独占部分
        if venn.get_label_by_id('001') is not None:
            venn.get_label_by_id('001').set_text(f'{unique3}')  # 设置第三个集合的独占部分
        if venn.get_label_by_id('111') is not None:
            venn.get_label_by_id('111').set_text(f'{shared}')  # 设置共享部分的数量
        
        # 设置颜色
        venn.get_patch_by_id('100').set_color(colors[0])  # 第一个集合的颜色
        venn.get_patch_by_id('010').set_color(colors[1])  # 第二个集合的颜色
        venn.get_patch_by_id('001').set_color(colors[2])  # 第三个集合的颜色
        venn.get_patch_by_id('111').set_color('#C6E1B8')  # 共享部分的颜色
    
    # 显示韦恩图
    plt.show()
    plt.close()

# 主函数，整合步骤
def main(file_path, colors, output_file):
    df = read_data(file_path)
    
    # 创建集合
    category_groups, haplogroups = create_sets(df)
    
    # 打印空集合的警告
    for category, ids in category_groups.items():
        if not ids:
            print(f"警告: {category} 为空集")
    
    # 计算共享部分
    if len(category_groups) == 2:
        category1, category2, shared_counts, category_unique, category_shared_contribution = calculate_shared_counts(category_groups, haplogroups)
        plot_venn(category_groups, shared_counts, category_unique, category_shared_contribution, colors)
        save_results(output_file, category_groups, shared_counts, category_unique, haplogroups)  # 添加haplogroups参数
        
    elif len(category_groups) == 3:
        category1, category2, category3, shared_counts, category_unique, category_shared_contribution = calculate_shared_counts(category_groups, haplogroups)
        plot_venn(category_groups, shared_counts, category_unique, category_shared_contribution, colors)
        save_results(output_file, category_groups, shared_counts, category_unique, haplogroups)  # 添加haplogroups参数
    
    else:
        print("目前仅支持2个或3个集合的Venn图绘制。")


# 示例调用
file_path = 'C:/Users/LuzHu/Desktop/1.txt'
output_file = 'C:/Users/LuzHu/Desktop/venn_results.txt'
colors = ['#FF9999', '#66B2FF', '#99FF99']
main(file_path, colors, output_file)

复制]]></description><link>软件操作\分析软件\python\python：共享单倍群个体数目的venn图.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：共享单倍群个体数目的Venn图.md</guid><pubDate>Wed, 09 Oct 2024 03:21:54 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410091115565.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410091115565.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据]]></title><description><![CDATA[ 
 <br><br>分组文件 txt 格式，无表头<br>Li_Hainan	Tai_Kadai
Han_FujianSinitic
She_FujianHmong_Mien
Mongolian_InnerMongoliaMongolic
Han_ChongqingSinitic
Tujia_GuizhouTibeto_Burman
Miao_GuizhouHmong_Mien
Dong_GuizhouTai_Kadai
Han_GuangxiSinitic
Han_GuangdongSinitic
Zhuang_GuangxiTai_Kadai
Han_HainanSinitic
Bouyei_GuizhouTai_Kadai
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409270951878.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>将生成的结果替换到已准备好的 arp 文件末端部分就行了<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271010283.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
# Re-importing the necessary library as the code execution state has been reset.
import pandas as pd

# 替换这个txt文件
file_path = 'C:/Users/LuzHu/Desktop/1.txt'

# Read the file into a pandas DataFrame
group_data = pd.read_csv(file_path, sep="\t", header=None, names=["ID", "Category"])

# Group the IDs by category
grouped = group_data.groupby('Category')['ID'].apply(list).to_dict()

# Start writing the content for the .arp file
arp_content = "[[Structure]]\n\n"
arp_content += 'StructureName="New Edited Structure"\n'
arp_content += f'NbGroups={len(grouped)}\n\n'

# Loop through each category and add its IDs to the content
for category, IDs in grouped.items():
    arp_content += f'Group={{\n'
    for ID in IDs:
        arp_content += f'\t"{ID}"\n'
    arp_content += "}\n.......\n"

# 替换输出的文件
arp_file_path = 'C:/Users/LuzHu/Desktop/1.arp'

# Write the content to the new .arp file
with open(arp_file_path, 'w', encoding='utf-8') as arp_file:
    arp_file.write(arp_content)

arp_file_path
复制]]></description><link>软件操作\分析软件\python\python：arlequin便携分组.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：Arlequin便携分组.md</guid><pubDate>Fri, 27 Sep 2024 02:10:18 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409270951878.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409270951878.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据]]></title><description><![CDATA[ 
 <br><br>
<br>fasta 文件
<br>&gt;Li_Hainan1
GGTTACCTGTC
&gt;Li_Hainan4
GGTTACCTGTC

复制<br>
<br>分组文件，txt 格式，无表头，注意 ID 要和 fasta 中一致
<br>Bai_Guizhou	South
Bouyei_Guizhou	South
Dong_Guizhou	South
Han_Guangxi	South
Han_Chongqing	South
Han_Shaanxi	North
Han_Shandong	North
Han_Guangdong	South
Han_Shanxi	North
Han_Fujian	South
Han_Gansu	North
Han_Hainan	South
Han_Henan	North
Han_Sichuan	South
Hui_Sichuan	South
Hui_Hainan	South
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271359536.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>fasta转Arp.py<br>

# Loading the FASTA file and the group txt file to understand their structure and content

fasta_file_path = 'C:/Users/LuzHu/Desktop/Illumina_Y2206.fasta' #fasta文件路径
group_file_path = 'C:/Users/LuzHu/Desktop/所有南北.txt'  #民族_群体分组文件
arp_file_path = 'C:/Users/LuzHu/Desktop/Illumina_Y2206_所有南北.arp'  #结果文件路径
# Read the FASTA file
with open(fasta_file_path, 'r') as file:
    fasta_content = file.readlines()

# Read the Group file
try:
    with open(group_file_path, 'r', encoding='utf-8') as file:
        group_content = file.readlines()
except UnicodeDecodeError:
    # Trying with a more forgiving encoding, assuming the file might have non-standard characters
    with open(group_file_path, 'r', encoding='latin1') as file:
        group_content = file.readlines()

# Inspecting the first few lines of each file to understand their structure
fasta_preview = fasta_content[:5]  # Preview of the FASTA file
group_preview = group_content[:5]  # Preview of the group file

fasta_preview, group_preview

from collections import defaultdict

# Processing the group information to count the number of samples per group
group_dict = defaultdict(list)
for line in group_content:
    sample_name, group_name = line.strip().split('\t')
    group_dict[group_name].append(sample_name)

# Calculating the number of unique groups (NbSamples)
nb_samples = len(group_dict)

# Preparing to match FASTA sequences to their respective groups
# First, create a dictionary to store sequences by sample name for easy lookup
sequence_dict = {}
current_sample_name = ""
for line in fasta_content:
    if line.startswith('&gt;'):
        # Extract sample name, removing the '&gt;'
        current_sample_name = line[1:].strip().split()[0]
        sequence_dict[current_sample_name] = ""
    else:
        # Append sequence lines to the current sample's sequence
        sequence_dict[current_sample_name] += line.strip()

# Now, we can create the .arp file content
arp_content = "[Profile]\n"
arp_content += "   Title = \"Genetic Diversity Analysis\"\n"  # Example title
arp_content += f"   NbSamples = {nb_samples}\n"  # Total number of groups
arp_content += "   DataType = DNA\n"
arp_content += "   GenotypicData = 0\n"
arp_content += "   LocusSeparator = NONE\n"
arp_content += "   MissingData = \"N\"\n"
arp_content += "   CompDistMatrix = 1\n\n"
arp_content += "[Data]\n\n"

# Adding each group's sample information to the .arp file content
for group_name, samples in group_dict.items():
    sample_size = len(samples)  # Number of samples in the group
    arp_content += "[[Samples]]\n"
    arp_content += f"   SampleName = \"{group_name}\"\n"
    arp_content += f"   SampleSize = {sample_size}\n"
    arp_content += "   SampleData= {\n"
    for sample in samples:
        sequence = sequence_dict.get(sample, "N" * 100)  # Fallback to 'N' if not found
        arp_content += f"       {sample} 1 {sequence}\n"
    arp_content += "}\n\n"

# Previewing the beginning of the arp_content
arp_content_preview = "\n".join(arp_content.split('\n')[:20])  # Preview the first few lines
arp_content_preview

# Saving the .arp content to a new file


with open(arp_file_path, 'w', encoding='utf-8') as file:
    file.write(arp_content)
复制]]></description><link>软件操作\分析软件\python\python：fasta转arp.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：fasta转Arp.md</guid><pubDate>Fri, 27 Sep 2024 06:00:46 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271359536.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409271359536.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[输入文件]]></title><description><![CDATA[ 
 <br><br>只需要准备一个 csv 格式文件，第一列可不要，其他列名必须是：Haplotype 和classification<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051514129.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>classification 的内容是对群体的分类，比如南北等<br><br>
<br>更改文件路径<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051522328.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>haplotype_input_file：填入准备的原始单倍群输入文件路径<br>
processed_file：计算的累加频率的中间文件路径，需要更改，但文件本身会删掉<br>
cumulative_file：计算的各级单倍群的累加频率文件<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051523298.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>manhattan_output_file：指定群体的曼哈顿图频率差值结果<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051523089.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>
运行代码，填入需要计算的群体<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051525736.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
输入的依次是减数和被减数，每次输入后按回车即可

<br>
得到曼哈顿图结果<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051526367.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br><br>import pandas as pd
import os 
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
from adjustText import adjust_text

# 定义文件路径
haplotype_input_file = 'C:/Users/LuzHu/Desktop/所有群体原始单倍群.csv'  # 请替换为你的原始单倍群输入文件路径
processed_file = 'C:/Users/LuzHu/Desktop/PROCE.csv'
cumulative_file = 'C:/Users/LuzHu/Desktop/所有群体各级频率总表.csv'  # 请替换为分级单倍群频率输出文件路径
manhattan_input_file = cumulative_file  # 使用第一个代码生成的累加频率文件
manhattan_output_file = 'C:/Users/LuzHu/Desktop/曼哈顿图频率.csv'  # 指定群体的曼哈顿图频率差值结果

# 代码1：生成各级不同分类下的各级单倍群频率
def process_haplotype_data(input_file, output_file, cumulative_file_path):
    # 读取原始数据
    data = pd.read_csv(input_file)

    # 计算每个区域内的每个Haplotype的数量
    haplogroup_counts = data.groupby(['Haplotype', 'classification']).size().reset_index(name='count')

    # 创建数据透视表，将Haplotype作为行，区域作为列
    haplogroup_pivot = haplogroup_counts.pivot(index='Haplotype', columns='classification', values='count').fillna(0)

    # 计算每个区域内每个Haplotype的频率
    haplogroup_pivot = haplogroup_pivot.div(haplogroup_pivot.sum(axis=0), axis=1) * 100

    # 提取Haplotype列表并处理
    haplogroups = data['Haplotype'].tolist()
    processed_haplogroups = []

    # 按规则处理Haplotype
    for haplogroup in haplogroups:
        processed_haplogroups.append(haplogroup)
        while len(haplogroup) &gt; 1:
            haplogroup = haplogroup[:-1]
            processed_haplogroups.append(haplogroup)

    # 去重并排序
    unique_processed_haplogroups = sorted(set(processed_haplogroups))

    # 创建包含处理后Haplotype的新DataFrame
    final_df = pd.DataFrame(unique_processed_haplogroups, columns=['Haplotype'])

    # 合并最终DataFrame和Haplotype频率DataFrame
    proce_df = final_df.merge(haplogroup_pivot, how='left', left_on='Haplotype', right_index=True).fillna(0)

    # 将结果保存到CSV文件
    proce_df.to_csv(output_file, index=False)

    # 清理数据类型
    df_cleaned = pd.read_csv(output_file)
    df_cleaned.iloc[:, 1:] = df_cleaned.iloc[:, 1:].apply(pd.to_numeric, errors='coerce').fillna(0)

    # 获取Haplotype列表
    haplogroups = df_cleaned['Haplotype'].tolist()

    # 初始化累加频率字典
    cumulative_freq = {col: {hg: 0 for hg in haplogroups} for col in df_cleaned.columns[1:]}

    # 定义检查Haplotype是否是另一个Haplotype下级的函数
    def is_descendant(parent, child):
        return child.startswith(parent) and len(child) &gt; len(parent)

    # 缓存 is_descendant 结果
    descendant_cache = {}

    for parent in haplogroups:
        # 先处理 parent 自身的数据
        for col in df_cleaned.columns[1:]:
            if not df_cleaned.loc[df_cleaned['Haplotype'] == parent, col].empty:
                cumulative_freq[col][parent] += df_cleaned.loc[df_cleaned['Haplotype'] == parent, col].values[0]

        for child in haplogroups:
            if (parent, child) not in descendant_cache:
                descendant_cache[(parent, child)] = is_descendant(parent, child)
            if descendant_cache[(parent, child)]:
                for col in df_cleaned.columns[1:]:
                    if not df_cleaned.loc[df_cleaned['Haplotype'] == child, col].empty:
                        cumulative_freq[col][parent] += df_cleaned.loc[df_cleaned['Haplotype'] == child, col].values[0]

    # 创建存储累加频率的新DataFrame
    cumulative_df = pd.DataFrame(cumulative_freq).reset_index()
    cumulative_df.rename(columns={'index': 'Haplotype'}, inplace=True)

    # 将所有数值除以100
    cumulative_df.iloc[:, 1:] = cumulative_df.iloc[:, 1:] / 100

    # 保存累加频率到新文件
    cumulative_df.to_csv(cumulative_file_path, index=False)
    # 删除PROCE.csv
    os.remove(output_file)
    print("一个不需要的文件已经被删除了;\n累加后的文件路径：", cumulative_file_path)
    
    return cumulative_file_path

# 代码2部分
def data_transformation(input_file, output_file):
    # 读取输入文件
    df_input = pd.read_csv(input_file)

    # 创建输出文件的数据框架
    df_output = pd.DataFrame()

    # 第1列：SNP
    df_output['SNP'] = df_input.iloc[:, 0]

    # 第2列：CHR
    df_output['CHR'] = df_output['SNP'].str[0]

    # 第3列：POS
    df_output['POS'] = range(1, len(df_output) + 1)

    # 打印列名供用户选择
    print("可计算频率的群体列名如下：")
    print(df_input.columns)

    # 交互式输入被减数列名
    first_group_col = input("请输入第一个群体分类（被减数，输入列名）：")

    # 交互式输入减数列名
    second_group_col = input("请输入第二个群体分类（减数，输入列名）：")

    # 计算差值并填入第四列
    df_output['P'] = df_input[first_group_col] - df_input[second_group_col]

    # 保存结果到输出文件
    df_output.to_csv(output_file, index=False)

    print("该曼哈顿图的频率差值文件已保存，文件路径：", manhattan_output_file)
    return output_file, first_group_col, second_group_col

def plot_manhattan(file_path, title):
    # 设置字体类型
    rcParams['pdf.fonttype'] = 42
    rcParams['ps.fonttype'] = 42

    # 读取数据
    mydata = pd.read_csv(file_path)

    # 提取绘图所需数据列
    chrom = mydata['CHR']
    pos = mydata['POS']
    pval = mydata['P']
    snp = mydata['SNP']

    # 设置颜色和形状
    colors = ['#EA1F1F', '#E88421', '#E5C923', '#ded82d', '#9DEF1B', '#42D726',
              '#449657', '#4CCCB3', '#369BA8', '#2B7EBC', '#3626D1', '#A128CE', '#999999']
    shapes = ['o', 's', '^', 'D', 'v', '&lt;', '&gt;', 'p', '*', 'H', '+', 'x', 'd']

    # 设置阈值
    thresholds = [-0.05, 0.05]

    # 计算每个染色体的SNP数量和位置信息
    chrom_info = mydata.groupby('CHR')['POS'].agg(['min', 'max', 'count']).reset_index()
    chrom_info['width'] = chrom_info['max'] - chrom_info['min']

    # 绘制曼哈顿图
    plt.figure(figsize=(15, 5))

    # 分配每个染色体的X轴位置，避免重叠
    chrom_mapping = {}
    current_position = 0

    for _, row in chrom_info.iterrows():
        chrom = row['CHR']
        width = row['width']
        chrom_mapping[chrom] = current_position + width / 2
        current_position += width + 10  # 加上间隔避免重叠

    # 绘制点
    texts = []
    for chrom in chrom_mapping:
        group = mydata[mydata['CHR'] == chrom]
        x_base = chrom_mapping[chrom]
        x_positions = group['POS'] + (x_base - group['POS'].mean())  # 调整x位置使其分布在染色体中心
        y_positions = group['P']
        color = colors[list(chrom_mapping.keys()).index(chrom) % len(colors)]
        shape = shapes[list(chrom_mapping.keys()).index(chrom) % len(shapes)]
        plt.scatter(x_positions, y_positions, color=color, s=10, marker=shape)

        # 标记超过阈值的点并添加文字标签
        for (x, y, (_, row)) in zip(x_positions, y_positions, group.iterrows()):
            if row['P'] &lt; thresholds[0] or row['P'] &gt; thresholds[1]:
                text = plt.text(x, y, row['SNP'], fontsize=8, ha='right')
                texts.append(text)

    # 添加阈值线
    plt.axhline(y=thresholds[0], color='#999999', linestyle='--')
    plt.axhline(y=thresholds[1], color='#999999', linestyle='--')

    # 自动调整Y轴范围
    plt.ylim(pval.min() - 0.1, pval.max() + 0.1)

    # 调整文本位置以避免重叠并添加指向的线段
    adjust_text(texts, 
                arrowprops=dict(arrowstyle='-&gt;', color='gray', lw=0.5, shrinkA=5),
                expand_text=(1.5, 1.5),
                expand_objects=(1.5, 1.5),
                force_text=(0.5, 0.5),
                force_objects=(0.5, 0.5),
                only_move={'points':'y', 'text':'xy'})

    # 设置X轴刻度和标签
    plt.xticks(ticks=[chrom_mapping[chrom] for chrom in chrom_mapping], labels=chrom_mapping.keys())
    plt.xlabel('Haplogroup')
    plt.ylabel('Frequency')
    plt.title(title)

    # 显示图像
    plt.show()

if __name__ == "__main__":
    # 处理Haplotype数据并生成累加频率文件
    cumulative_file = process_haplotype_data(haplotype_input_file, processed_file, cumulative_file)

    # 曼哈顿图绘制部分
    # 数据转换并生成曼哈顿图输入文件
    manhattan_output_file, first_group_col, second_group_col = data_transformation(cumulative_file, manhattan_output_file)

    # 使用生成的输出文件绘图，并设置图的标题为“列名1-列名2”
    plot_title = f"{first_group_col} - {second_group_col}"
    plot_manhattan(manhattan_output_file, plot_title)

复制]]></description><link>软件操作\分析软件\python\python：从单倍群频率一键出曼哈顿图.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：从单倍群频率一键出曼哈顿图.md</guid><pubDate>Fri, 05 Jul 2024 07:26:30 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051514129.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051514129.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据]]></title><description><![CDATA[ 
 <br><br>需要从 Tracer 中导出的BSP 的数据文件，此处选择 20000年 尺度，因为会把时间点划分得更精细一些，可以到几百年的尺度<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102059588.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
点击导出<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102100973.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>文件格式如下<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102056618.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
<br>欧洲近期大扩张<a data-footref="1" href="about:blank#fn-1-1c3de39a805c587b" class="footnote-link" target="_self" rel="noopener">[1]</a>这篇文献中给出的是这样的表格，得到的是 Ne 最小的时候该时间点的置信区间<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102106601.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
对应的是图中的灰色阴影部分<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102108368.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>但文中没有直接给出计算方法，在方法中写的是<br>
For the 13 populations  showing a recent expansion in the BSP, the limits of the 95% CI of mutation rate  (0.92–1.09* 10^-9) were used to define the CI of the time estimate of the minimum effective population size before the expansion (grey shading in Fig. 2).
<br>
<br>
根据这个描述，再结合 BSP 导出文件中只有有效群体大小对应的时间点，和该群体大小的置信区间，但没有某个时间点的置信区间，所以只能退而求其次，用这个公式，先求出 Ne 最小时对应的遗传距离，再用突变率的上下定义时间计算出对应的时间<br>


<br>
假设最小有效群体大小的时间点是3023年，突变率为  , 我们可以用以下步骤来计算3023年这个时间的置信区间：

<br>
<br>

<br>遗传距离=3023/  =


<br>2.使用突变率置信区间计算时间的置信区间：

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102122804.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br>得出的结果和原文基本一致<br><br>
<br>
需要替换BSP 导出文件所在路径和结果文件所在路径<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102103355.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
如果使用的是不同的突变率，需要替换掉<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102104738.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>现在有个问题，就是 BSP 导出的时间特别的有规律，会看起来不太科学（o(╥﹏╥)o），但是暂时没想到解决办法<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102124575.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>结果文件<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102125401.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>import os
import pandas as pd

# 替换为你的BSP结果文件所在的目录路径
directory_path = 'C:/Users/LuzHu/Desktop/1' # 请替换为你的BSP结果文件所在的目录路径
output_file = 'C:/Users/LuzHu/Desktop/output_summary.txt'  # 请替换为你的输出结果所在的文件路径

def calculate_time_interval(years_since_expansion, mutation_rate, mutation_rate_confidence): 
    """
    根据遗传距离和突变率计算时间估计的置信区间。

    参数:
    years_since_expansion (int): 自种群扩张以来的年数。
    mutation_rate (float): 每年每碱基的平均突变率。
    mutation_rate_confidence (tuple): 突变率置信区间的上下界。

    返回:
    tuple: 时间估计的置信区间的下限和上限。
    """
    # 使用平均突变率计算遗传距离
    genetic_distance = years_since_expansion * mutation_rate

    # 使用突变率置信区间计算时间的上限和下限
    lower_bound_time = genetic_distance / mutation_rate_confidence[1]  #高突变率给出较近期的时间
    upper_bound_time = genetic_distance / mutation_rate_confidence[0]  #低突变率给出较古老的时间

    return (lower_bound_time, upper_bound_time)

# 遍历目录下所有文件
with open(output_file, 'w', encoding='utf-8') as output:
    # 写入文件头
    output.write(f"文件名\t最小median对应的year值\t置信区间(下限,上限)\n")
    
    for file_name in os.listdir(directory_path):
        # 拼接文件路径
        file_path = os.path.join(directory_path, file_name)
        
        # 检查是否为文件
        if os.path.isfile(file_path):
            try:
                # 读取txt文件并将其转为DataFrame
                df = pd.read_csv(file_path, sep='\t', skiprows=1)
                df.columns = df.columns.str.strip()  # 移除列名中的多余空格

                # 查找median列的最小值及对应的time值
                min_median_row = df.loc[df['median'].idxmin()]
                years_since_expansion = int(round(min_median_row['time']))  # 保留为整数

                # 预设参数
                mutation_rate = 0.76e-9  # 突变率
                mutation_rate_confidence = (0.67e-9, 0.86e-9)  # 突变率置信区间

                # 计算置信区间
                time_interval = calculate_time_interval(years_since_expansion, mutation_rate, mutation_rate_confidence)

                # 将置信区间结果四舍五入为整数
                time_interval = (int(round(time_interval[0])), int(round(time_interval[1])))

                # 将结果保存到输出文件中
                output.write(f"{file_name}\t{years_since_expansion}\t{time_interval}\n")
            except Exception as e:
                # 如果文件处理过程中出现错误，输出错误信息
                output.write(f"{file_name}\t错误: {str(e)}\n")

print(f"结果已保存到 {output_file}")

复制<br><br><br>
<br>
<br>Large-scale recent expansion of European  patrilineages shown by population resequencing<a href="about:blank#fnref-1-1c3de39a805c587b" class="footnote-backref footnote-link" target="_self" rel="noopener">↩︎</a>
]]></description><link>软件操作\分析软件\python\python：计算bsp最小ne时间的置信区间.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：计算BSP最小Ne时间的置信区间.md</guid><pubDate>Tue, 10 Sep 2024 13:26:36 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102059588.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102059588.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[输入文件]]></title><description><![CDATA[ 
 <br><br>txt 文件，没有表头<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409011532990.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409011533187.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>from collections import defaultdict

def process_names(input_file, output_file):
    # 读取输入文件
    with open(input_file, 'r') as file:
        names = file.read().splitlines()

    # 计数并添加编号
    name_count = defaultdict(int)
    processed_names = []
    for name in names:
        name_count[name] += 1
        processed_name = f"{name}_{name_count[name]}"
        processed_names.append(processed_name)

    # 写入输出文件
    with open(output_file, 'w') as file:
        for name in processed_names:
            file.write(name + '\n')

# 输入和输出文件名
input_file = 'C:/Users/LuzHu/Desktop/1.txt'  # 确保你的输入文件名正确，并位于相同的目录
output_file = 'C:/Users/LuzHu/Desktop/2.txt'  # 输出文件名
process_names(input_file, output_file)

复制]]></description><link>软件操作\分析软件\python\python：自动计数相同内容并编号.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：自动计数相同内容并编号.md</guid><pubDate>Sun, 01 Sep 2024 07:34:43 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409011532990.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409011532990.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>首先，利用&nbsp;tracer&nbsp;软件绘制一个<a data-tooltip-position="top" aria-label="http://www.llt.asia/%E6%9C%AF%E8%AF%AD/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9B%BE%EF%BC%88bayesian-skyline-plot,-bsp%EF%BC%89.html" rel="noopener" class="external-link" href="http://www.llt.asia/%E6%9C%AF%E8%AF%AD/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9B%BE%EF%BC%88bayesian-skyline-plot,-bsp%EF%BC%89.html" target="_blank">贝叶斯天际线图（Bayesian Skyline Plot, BSP）</a>&nbsp;.<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536742.png" referrerpolicy="no-referrer"><br>然后，导出原数据：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536046.png" referrerpolicy="no-referrer"><br>
点击图中的&nbsp;Export Data Table.<br>检查导出的文件，是否存在异常，如果有，记得删去！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409072016116.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件操作\分析软件\python\python：bsp美化.html</link><guid isPermaLink="false">软件操作/分析软件/Python/Python：BSP美化.md</guid><pubDate>Tue, 10 Sep 2024 12:58:01 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536742.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536742.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[从简单词Good开始]]></title><description><![CDATA[ 
 <br>就像送一个八音盒给家人，加或者不加包装，差别很大，同时也让你的礼物本身有了让人更喜欢/没那么吸引人的区别。<br>语言也是如此，表达同一个意思，但说法不同，效果大有不同。<br><br>首先，请列出和good相近含义的一些词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290923450.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>揭晓答案<br>
good的近义词，1-5很常见，但如果用上了6-7，就会变得更加独特<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290921956.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>你可能觉得改变一个词没什么大不了，但实际上通过替换常见词（common word），可以让我们的语言变得更多样化（varied），同时显得更流畅（fluent）。<br><br>现在我们来看同义替换是否真的会有所不同。<br>假如只用good，效果会是这样<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290928957.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>但假如用刚刚提到的词去替换good<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290930230.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>你会发现，这样更加流程了，而你只换了一个词而已！<br>所以，请牢记这个问题：How you say it is just as important as what you say.<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290931848.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>假如别人邀请你吃饭并评价这顿饭，而你只会说good，那你可能再也不会被邀请了~<br>实际上可以这样<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290934583.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>可能这略显复杂，那么刚开始需要做的其实就是替换掉你想说的常见词<br>
假如你本来想说：I think the dinner was good，替换掉常见词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290936691.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>你就会得到这句话：In my opinion, the dinner was fantastic.<br><br>要学会再说话时自如的替换常用词汇<br>
It is important to be comfortable about changing thing around when we speak.<br>换句话说，就是要creative<br>尝试不同的东西，实验自己的语言<br>
Try different things, experiment with your language]]></description><link>小鹿绅士\1-文体学概述：开始创造性地使用语言.html</link><guid isPermaLink="false">小鹿绅士/1 文体学概述：开始创造性地使用语言.md</guid><pubDate>Thu, 29 Feb 2024 01:41:43 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290923450.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202402290923450.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1 以猫为例]]></title><description><![CDATA[ 
 <br>假如你家有一只漂亮的猫，现在要你不看照片，用英语描述她的漂亮，你会发现这很困难<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010927622.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>能否恰当的描述事物，是英语能力的重要一环<br>
Describing things properly makes a huge a difference in your English level<br><br>那么如何描述一个事物呢？回到这只猫上<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010930132.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>首先，我需要做的事陈述这个事物的存在<br>
Well, first and foremost I need to state that the object exists<br>也就是说<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010930593.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>陈述事实是描述任何事物的基础<br>
Stating the subject is the foundation on which we build any type of description<br>当有了事实过后，就只需要添加一些细节，就能让整个内容变得丰满。<br><br>那么如何变得丰满呢？<br>首先是形容词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010933194.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>事实上，用两个形容词一起来形容某个事物是很常见的，比如，在这里可以再加上一个形容颜色的adj<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010935300.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在用上述方式练习一下<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010936670.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>但是注意，如果用3个及以上形容词，句子就会显得很奇怪了。<br>所以需要用到一些little helpful words来把句子分开，例如 with，现在整个句子的细节又增加了，并且不至于显得奇怪<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010940840.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在请练习一下<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010941130.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在看起来已经丰满多了，但是还可以继续添加，另一个little helpful words也很好用，那就是that<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010944451.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>再举一个例子，你可以发现，这样句子就变得复杂一些了<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010946247.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在把技巧用上，来造就你的final beautiful sentence<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010947979.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在揭晓一种答案<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010948882.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010949152.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>你瞧，无论描述人或者物，添加细节是核心<br>
So as you can see adding details is the key to successfully describing anyone or anything<br>所以可能会问：什么样的细节才足够多呢？<br>事实上，永远不够。但对于基本的描述事物，已经足够了。<br>不要忘记，你不需要用特别复杂的词汇<br>
And always remember, you don't need to use any elaborate complex words<br>只需要把你已知的词汇用有创造力的方式使用出来就可以了！<br><br>如何在使用语言时更加有创造性呢？<br>这次再次以猫为例，但关注一下她的缺点。<br>两个形容词<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010956777.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>加上with<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010957017.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>加上that<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010958830.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在你可能完全不再喜欢这只猫了。所以你发现了吗？不同的描述侧重点将带来完全不同的感受。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011002311.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>揭晓答案<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011003537.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011005211.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>要有创造性，那么你就要学会看到事物的正反面，要记得使用little helpful words，如with、that等<br>顺便回顾一下上次课程提到的同义替换（rephrasing/paraphrasing），这非常重要，总会有更好的词来使句子变得更美<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011008224.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>再回到今天的课程中，有些词可以换一下<br>关于cute<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011010261.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>关于big<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011010444.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>关于sleep<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011011108.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>关于fat<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011011251.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>关于lazy<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011011069.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>关于smelly<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011012270.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>关于like<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403011013294.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>小鹿绅士\2-句子扩展：让语句更加具体且形象.html</link><guid isPermaLink="false">小鹿绅士/2 句子扩展：让语句更加具体且形象.md</guid><pubDate>Fri, 01 Mar 2024 02:13:12 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010927622.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403010927622.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3 同义表达：使用有自己特色的语言]]></title><description><![CDATA[ 
 <br>前文已经提到了rephrasing，即替换，它的含义是：<br>改变表达方式但不改变表达意思<br>
changing the form of your words without changing the meaning<br>今天，将要集中讨论一种替换，即同义词替换，使用synonym，那么什么是synonym呢？<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041445245.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>为什么要使用synonym？<br>
因为如果一直重复某个词，对话会显得很呆板。同义词就可以避免这个问题。<br><br>例句为：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041448116.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
go是个非常广泛的词，可以包含很多含义<br>现在开始替换<br>
travel，更明确<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041449436.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>fly，指明go的方式<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041451133.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>take train，去的方式<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041517454.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>visit，目的要去干嘛<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041518478.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>relocat，重新安置到某地，比如是因为公司搬迁之类的，也是表目的<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041520962.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>move，搬去<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041522567.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>顺便提到3个表示离开的词<br>immigrate，移民<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041522310.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>run，犯罪了跑路<br>
我要逃到英国躲起来<br>
I will run to London to hide.<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041525246.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>tour，感觉和travel很像，但更多表示是跟旅游团<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041526923.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>就算是简单词go，都有这么多的近义词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041527362.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>这些词可以被替换，取决于我具体在做什么，所以通过使用同义词，可以更精确地描述我如何去伦敦，以及去的原因。<br>因为只简单的说去的话，你可能表达的意思很多<br>
Because by simply saying go, you could mean anything<br>不要忘记我总是说的:要有创造力<br>
ust always remember the advice l constantly give you, which is be creative.<br>但是不要逼着自己去找意思完全相同的同义词！<br>
比如good和great<br>当你在利用同义词替换时，应该更加灵活一些！<br>
例如我刚才给你的例子:逃跑和搬家<br>
他们是完全不同意思的词，相互之间并不是同义词<br>
但对于go来说，他们又都是同义词<br><br>例句为做作业<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041535141.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在试著找几个同义词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041536821.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在揭晓几个同义词<br>搞定我的作业<br>
I am taking care of my homework.<br>写作业而不是读作业<br>
I am writing my homework.<br>数学不行，可能在抄作业<br>
I am copying my homework.<br>可能性不高哈哈<br>
I am eating my homework.<br>再次重申！！！要有创造力<br>
不要限制自己说话的方式<br>
Do not restrain yourself in the ways you speak.<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041540912.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>首先，替换形容词和动词，因为这些是最容易找到替换的词。<br>当然也可以替换名词，如shoes和footwear，但这对词汇量的要求更高。<br>为了能够替换得更好，需要不断地去实验/尝试。寻找身边的物品，去描述它们，然后再将描述内容做替换。<br>
再次以猫为例：替换掉cute和fat<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050915148.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>只有当你不断去使用替换时，才能训练大脑不停地寻找、使用同义词，久而久之就会有一个备选的同义词库<br>比如这些东西，都可以尝试去替换<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050926687.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在马上练习一下，来描述一下小鹿绅士，尝试替换一下handsome和smart<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050930341.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>同时可以结合所学，把之前讲的更全面的描述运用起来<br>step1：添加第2个形容词<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050932908.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>step2：加上小词with<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050933090.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>step3：用who构成从句，或使用and来增加一个特征<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050934500.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>step4：rephrase形容词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050935325.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>最后，选择一个句子来进行扩写和替换<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403050937644.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>小鹿绅士\3-同义表达：使用有自己特色的语言.html</link><guid isPermaLink="false">小鹿绅士/3 同义表达：使用有自己特色的语言.md</guid><pubDate>Sat, 23 Mar 2024 07:41:43 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041445245.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403041445245.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4 连接词：让独立的句子变成更加流畅的段落]]></title><description><![CDATA[ 
 <br>在说英语时，经常遇到的问题是不知道如何将话题继续进行下去<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081417734.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>即使开始了一个话题，也不知道该如何继续下去，结果只说了一句话，当然就显得不够流畅<br>举个例子，描述朋友买了一条新裙子<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081418949.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>然后大多数人就停下来了，不知道说啥。那么如何去扩展句子呢？<br>
其实就是在之前所说的主题（她穿裙子）之下，找一些关联的话题<br><br>假如继续使用之前学过的技巧，加一些细节。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081423469.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081425603.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>连接词可以让句子自然地连接在一起。<br>继续刚刚的话题，现在找到和主题相关的句子。这两句可以告诉我们更多关于Mary穿着的细节信息。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081426490.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>如果我直接这样把三句话说出来的话，会显得很笨拙<br>
If l was to put the sentences just the way they are. lt will sound a little clumsy when l say it.<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081430255.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>所以需要用连接词把他们组合在一起。<br>现在自己想三句话，第一句是主题，其他两句是补充信息<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081434170.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>连接词可以分成3种<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081435423.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>addition=and，代表连续性，接下来的内容同意之前所表达的，即给出与前一句子一致的更多信息<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081437413.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>然后可以用其他词来替代and<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081438972.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br> 现在是练习时间，在屏幕上的句子后面加一句话。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141422480.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>contrdiction=but，对立或者对立词用来给出与之前句子不一致的信息<br>同样以前句为例，一个是肯定，一个是否定，所以连接词应该用对立词<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141425203.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>随便举一个例子<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141426630.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>同义词有哪些呢？<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141427807.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间到啦！<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141427904.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>result=so，结果类连接词，前后两句应当给出因果<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141428974.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>再回到刚才的例子<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141429403.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>同义词来袭！<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141429848.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习啦！<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141430147.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>得体的语言不会是平铺直叙的<br>
Proper speech is never on the same line.<br>不会永远是统一的或者对立的，语言应该灵活<br>
You don't only say positives or negatives. Your speech is alive.<br>例如，用上这些连接词后，语言就自然流畅多了！<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141431302.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在我们来试试用上所学的各种连接词，并且学会分析哪些是添加，哪些是对立，哪些是因果<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141433006.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>记住，这些词不仅仅是词汇而已，更是一种帮助你说得更多的方式<br>
它们可以帮助你多说一些，多想一些<br>
They are the helpful words that will allow you speak more, to think more,<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141436371.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>小鹿绅士\4-连接词：让独立的句子变成更加流畅的段落.html</link><guid isPermaLink="false">小鹿绅士/4 连接词：让独立的句子变成更加流畅的段落.md</guid><pubDate>Thu, 14 Mar 2024 06:36:24 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081417734.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403081417734.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[5 细节词汇：增加句子的信息量，更加生动的描述]]></title><description><![CDATA[ 
 <br>今天，我们将介绍另一类有相似连接作用的词汇，并且可以用来扩展的句子的词——detailing words 细节词<br>这些词是用来给一句话加入更多的细节信息，同时不会将一句话拆分开<br>举个例子，当我们不使用细节词时，之前形容猫的1个句子会变成2个句子<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141440678.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>但假如我们用上了细节词，如that，就不会中断这个句子<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141441572.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>这些词汇的作用是，它们让我们继续我们的句子，不会中断它们<br>
Now that is what these words do, they simply allow us to continue our sentence without breaking it.<br>细节词list如下<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141442366.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>who当然是用来谈论人的<br>
“who'’ is of course the word we use to talk about people.<br>不用细节词，2个句子<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141443664.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>用上了细节词，1个句子<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141444570.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间！<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141445627.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>whom和who很像，但他们的用法略有不同，如果第一个人对第二个人发起了任何动作就应该用whom<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141506290.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>例如，使用who来描述他人时，二者是没有相互作用的<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141502409.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>但是用whom时，应该是二者有什么联系，产生了动作met，如下<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141505769.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>这时候产生了一个动作，就用whom<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141505369.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br> 例如<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141507500.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间到<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141510511.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>可以描述绝大多数的物品，给出更多的信息<br>例如<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231528297.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231528077.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231528657.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这个词很特别，因为几个原因<br>第一个原因，它的读音和witch一模一样，女巫<br>
第二个原因，它用于描述一件被很多同类物品包围的东西<br>
to point out a detail about an object that has other objects around it.<br>举个例子来理解它：假如给你一颗糖，你可以用that来说<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231531204.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>但假如有很多糖，就会用which这样问，因为有很多，代表可以选择<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231532032.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>所以，我们在多个物品可能被谈及的时候用它<br>
We use it when there is more than one object that could be referred to<br>例如<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231533974.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231534802.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231534851.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>where用来描述地点<br>例如<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231535861.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231535977.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231536749.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>when用来添加时间方面的细节<br>例如<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231537845.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231537185.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231537572.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在有三个句子，我们使用所学变成连贯的句子<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231539333.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>用连接词和细节词连在一起<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231540675.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>练习时间<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231540394.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>小鹿绅士\5-细节词汇：增加句子的信息量，更加生动的描述.html</link><guid isPermaLink="false">小鹿绅士/5 细节词汇：增加句子的信息量，更加生动的描述.md</guid><pubDate>Sat, 23 Mar 2024 07:40:36 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141440678.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403141440678.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6 风格：不同场景下的不同表达风格]]></title><description><![CDATA[ 
 <br>就像每天干的事情不同，穿的衣服也不同一样，语言也有不同语境之下的风格<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231545961.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>我们一般把语言分成两类，正式和非正式<br>
Generally we tend to simply divide them into two groups: formal and informal speech<br>但之下也有很多亚群，也就是types of sentences，即不同的风格<br><br>用来传递直截了当的事实，例如<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231549508.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>大部分都是基本句型，现在想一个简单句，如My cat is sleeping<br><br>用来描述具体细节，如讲故事，我们之前扩展句子的很多技巧都属于它。例如<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231552040.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>描述句会比简单的信息句长得多，因为它的存在本来就是要尽可能的给出细节信息<br><br>用来给出重要问题：这都是为什么？ 旨在分析信息句中对事实的描述，并试图解释它。<br>
一般都会有一些关键词，例如<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231556743.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>分析句不会描述也不会给出细节，而是回答why，例如<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231558741.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>再给两个句子来帮助理解分析句<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231559290.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>一般在写作中才会用到，是一种非常有艺术感的句子，所以有时候很难写出来，因为需要准确表达感情<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242210623.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>例如，回到猫上面<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242211322.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>然后我们可以分析下句子的成分，会发现前面是信息句，而后面则是叙述（使用了比喻）<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242212774.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>或者另外一个句子，描述了看到该场景过后我的感受<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242214977.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>因为叙述句是文艺的，所以创作空间很大，规则比较少。不过仍然有一些短语可以帮助我们使用叙述句<br>
<br>
feel like<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242220823.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
make sb / was xx

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242221789.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在尝试把一个informative sentence 变成narrative sentence<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403242223628.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>就是缩短词语<br>例如<br>
thank you=tx/thx<br>
Laughing out loud =L0L<br>
sleeping=zzz<br>这种方式一般见面不会使用，但是短信啥的比较常见]]></description><link>小鹿绅士\6-风格：不同场景下的不同表达风格.html</link><guid isPermaLink="false">小鹿绅士/6 风格：不同场景下的不同表达风格.md</guid><pubDate>Sun, 24 Mar 2024 14:26:53 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231545961.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403231545961.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[7 比喻：通过明喻或暗喻描述物品及人物]]></title><description><![CDATA[ 
 <br>今天是一个炎热的夏天，我感觉像茶壶一样<br>
Today is a hot summer day, so l feel like a tea kettle<br>这句话听起来可能会很奇怪，但实际上这是一个analogy，比喻<br>
比喻在英文中有很重要的位置，让你的语言从简单的叙述，变成真正美丽的文字<br>首先我们要知道，实际上有两种比喻：明喻和暗喻，前者有like/as这样的词，后者没有<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403270949542.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
明喻：<br>
I feel like a tea kettle.<br>
暗喻：<br>
I am a tea kettle today.]]></description><link>小鹿绅士\7-比喻：通过明喻或暗喻描述物品及人物.html</link><guid isPermaLink="false">小鹿绅士/7 比喻：通过明喻或暗喻描述物品及人物.md</guid><pubDate>Wed, 27 Mar 2024 01:50:54 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403270949542.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403270949542.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[8 强调：通过重音强调，让语言听起来]]></title><description><![CDATA[ 
 <br>说话有抑扬顿挫，也就是有重音。<br>
我们通过重音调集听者的注意力，以表示这是更加重要的信息。<br>
to put the listeners attention onto certain words to indicate that something is more important<br>
<br>syllable stress<br>
音节重音施加在词汇的某个音节<br>
Syllable is applied to a single syllable inside a word
<br>这通常是固定的，不能随便更改<br>
<br>word stress<br>
词汇重音就是句子中某个词的重音，与音节重音不同的是，词汇重音可以随意更改
<br>例如，简单的句子How are you today，四个词就可以有4个不同的词汇重音<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403250929387.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>英文的每句话中，总会有重音存在，所以随便一句话，你在读的时候实际上都不自觉加上了重音<br>实际上你可能发现了，根据重音的不同，句子听起来区别会很大。<br>
音节重音是为了正确的读出一个词，而<br>
词汇重音存在的意义，是强调一句话所表达的含义<br>
Word stress exists in order to indicate the meaning of a sentence<br>举个例子<br>
<br>
放在我-I上面，意味着有人买了车，但不是我<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260931897.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
放在didn't上，今天没有买车，强调这个动作<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260932124.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
放在buy上面，说明我的确有一辆车，但不是买的，可能中抽奖中的，偷的等等<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260933305.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
放在car上面，说明确实买了什么东西，但不是车，可能是马、自行车等<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260935169.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
放在today，说明不是今天买的，可能是其他时候<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260936571.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
放在a，也可以，说明买了不止1辆车<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260937018.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>所以你发现了，重音可以强调你所想表达的含义，所以是很重要的，每个词都可以加重音<br>
Stress simply indicates what are you talking about<br>重音朗读是学习重音的一种练习方式，也就是把重音放在每个词来读一读<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260941113.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>所以不同的重音会呈现不同的意思，在聊天的时候一定要注意重音放置的位置，不然就会很尴尬哟！]]></description><link>小鹿绅士\8-强调：通过重音强调，让语言听起来.html</link><guid isPermaLink="false">小鹿绅士/8 强调：通过重音强调，让语言听起来.md</guid><pubDate>Tue, 26 Mar 2024 01:44:32 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403250929387.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403250929387.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[9 礼貌语言：让自己的语言更加礼貌]]></title><description><![CDATA[ 
 <br>有些人问问题时会说你想喝点茶吗，你可能会直接说要或者不要，这里只考虑了功能，而并不会注重礼貌。<br>
有一些简单的词，可以凸显礼貌。<br>你想喝点茶吗?好的谢谢或不谢谢你<br>
Would you like to have some tea? Yes, please. Or no Thank you.<br>但实际上可以用一些方式来显得更有礼貌<br>
<br>基于你的感受：feeling<br>
例如，如果我很高兴和你一起喝茶，因为我喜欢和你在一起<br>
For example, if l'm happy to have some tea with you because l enjoy your company
<br>那这时候可以回答说<br>我很乐意和你一起喝茶<br>
I would be very happy to have some tea with you<br>另外还有一些词可以替换<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260950446.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>例如，用于request或offer<br>
哦，我很乐意和你一起完成这个项目<br>
Oh, l would be charmed to finish this project with you.<br>
It would be fascinating xxx.<br>
<br>如何礼貌地说No<br>
可以用一个positive word+but<br>
l would love to help you but I'm rather busy these days
<br>或者加上一些词<br>
unfortunately<br>
alas<br>
sadly<br>
unluckily<br>
例如 I would love to help you, but unfortunately l'm rather busy these days<br>
<br>如何礼貌地提出要求<br>
一个常见错误是使用太多的can（有能力），这并不礼貌，所以需要被softened，一般使用would和may<br>
would用来请求别人帮助，因为would是表示是否有意愿<br>
Would you help me with my homework, please?<br>
Would it be possible for you to help me with my homework?
<br>may用来请求别人允许自己做某事，因为may是表示请求<br>
May l use your phone?<br>
May l use the bathroom?<br>
May I call you later?<br>
May l answer this question in a different way?<br>现在是练习时间<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403270943573.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403270943389.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>总结一下：<br>
<br>can不礼貌，要用would/may
<br>不要干巴巴地只说yes/no，也不太礼貌，可以加一些feeling在里面
<br>不要忘记说please
]]></description><link>小鹿绅士\9-礼貌语言：让自己的语言更加礼貌.html</link><guid isPermaLink="false">小鹿绅士/9 礼貌语言：让自己的语言更加礼貌.md</guid><pubDate>Wed, 27 Mar 2024 01:45:48 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260950446.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/Gianthuiobsidian/202403260950446.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>